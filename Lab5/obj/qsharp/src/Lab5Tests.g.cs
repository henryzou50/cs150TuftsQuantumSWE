//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab5\",\"Name\":\"Exercise1Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":12,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Henry Zou\\\\OneDrive\\\\Documents\\\\TuftsCS\\\\CS150\\\\cs150TuftsQuantumSWE\\\\Lab5\\\\Lab5Tests.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab5\",\"Name\":\"Exercise1Test\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Henry Zou\\\\OneDrive\\\\Documents\\\\TuftsCS\\\\CS150\\\\cs150TuftsQuantumSWE\\\\Lab5\\\\Lab5Tests.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab5\",\"Name\":\"Exercise2Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":32,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Henry Zou\\\\OneDrive\\\\Documents\\\\TuftsCS\\\\CS150\\\\cs150TuftsQuantumSWE\\\\Lab5\\\\Lab5Tests.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab5\",\"Name\":\"Exercise2Test\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Henry Zou\\\\OneDrive\\\\Documents\\\\TuftsCS\\\\CS150\\\\cs150TuftsQuantumSWE\\\\Lab5\\\\Lab5Tests.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab5\",\"Name\":\"Exercise3Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":57,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\Henry Zou\\\\OneDrive\\\\Documents\\\\TuftsCS\\\\CS150\\\\cs150TuftsQuantumSWE\\\\Lab5\\\\Lab5Tests.qs\",\"Position\":{\"Item1\":58,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab5\",\"Name\":\"Exercise3Test\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\Henry Zou\\\\OneDrive\\\\Documents\\\\TuftsCS\\\\CS150\\\\cs150TuftsQuantumSWE\\\\Lab5\\\\Lab5Tests.qs\",\"Position\":{\"Item1\":58,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
#line hidden
namespace Lab5
{
    [SourceLocation("C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs", OperationFunctor.Body, 14, 34)]
    public partial class Exercise1Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise1Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise1Test")]
            public void Exercise1Test()
#line 14 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise1Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 14 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise1Test";
        String ICallable.FullName => "Lab5.Exercise1Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> Exercise1__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 15 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
            foreach (var numQubits in new QRange(3L, 8L))
#line hidden
            {
#line hidden
                {
#line 16 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    var (input,output) = (Allocate__.Apply(numQubits), Allocate__.Apply());
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 17 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 18 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        Microsoft__Quantum__Intrinsic__X.Apply(output);
#line 20 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        Exercise1__.Apply((input, output));
#line 22 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        foreach (var qubit in input)
#line hidden
                        {
#line 23 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((new QArray<Qubit>(qubit), output));
                        }

#line 25 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        Microsoft__Quantum__Intrinsic__X.Apply(output);
#line 26 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 28 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(input, new QArray<Qubit>(output)));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(input);
#line hidden
                            Release__.Apply(output);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Exercise1__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise1));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise1Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs", OperationFunctor.Body, 34, 59)]
    public partial class Exercise2Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise2Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise2Test")]
            public void Exercise2Test()
#line 34 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise2Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 34 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise2Test";
        String ICallable.FullName => "Lab5.Exercise2Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Random__DrawRandomInt
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,Qubit), QVoid> Exercise2__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 35 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
            foreach (var i in new QRange(1L, 10L))
#line hidden
            {
#line 36 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                foreach (var numQubits in new QRange(3L, 8L))
#line hidden
                {
#line hidden
                    {
#line 37 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        var (input,output) = (Allocate__.Apply(numQubits), Allocate__.Apply());
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 38 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            var firstIndex = Microsoft__Quantum__Random__DrawRandomInt.Apply((0L, (numQubits - 1L)));
#line 39 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            var temp = Microsoft__Quantum__Random__DrawRandomInt.Apply((0L, (numQubits - 2L)));
#line 40 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            var secondIndex = ((firstIndex != temp) ? temp : (temp + 1L));
#line 42 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 43 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(output);
#line 45 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Exercise2__.Apply((firstIndex, secondIndex, input, output));
#line 47 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((new QArray<Qubit>(input[firstIndex]), output));
#line 48 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((new QArray<Qubit>(input[secondIndex]), output));
#line 49 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(output);
#line 50 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 52 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                            Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(input, new QArray<Qubit>(output)));
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(input);
#line hidden
                                Release__.Apply(output);
                            }
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Random__DrawRandomInt = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Random.DrawRandomInt));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Exercise2__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise2));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise2Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs", OperationFunctor.Body, 59, -1)]
    public partial class Exercise3Test : Operation<QVoid, QVoid>, ICallable
    {
        public Exercise3Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "Exercise3Test")]
            public void Exercise3Test()
#line 59 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<Exercise3Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 59 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "Exercise3Test";
        String ICallable.FullName => "Lab5.Exercise3Test";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Random__DrawRandomInt
        {
            get;
            set;
        }

        protected ICallable<(Int64,ICallable), Boolean> Exercise3__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> AlwaysZero__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> AlwaysOne__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,Qubit), QVoid> Exercise1__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,Qubit), QVoid> Exercise2__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 60 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
            foreach (var i in new QRange(0L, 10L))
#line hidden
            {
#line 61 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                foreach (var numQubits in new QRange(3L, 8L))
#line hidden
                {
#line 62 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    var firstIndex = Microsoft__Quantum__Random__DrawRandomInt.Apply((0L, (numQubits - 1L)));
#line 63 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    var temp = Microsoft__Quantum__Random__DrawRandomInt.Apply((0L, (numQubits - 2L)));
#line 64 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    var secondIndex = ((firstIndex != temp) ? temp : (temp + 1L));
#line 66 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    if ((Exercise3__.Apply((numQubits, AlwaysZero__)) == false))
                    {
#line 67 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        throw new ExecutionFailException("Incorrectly classified AlwaysZero as balanced.");
                    }

#line 70 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    if ((Exercise3__.Apply((numQubits, AlwaysOne__)) == false))
                    {
#line 71 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        throw new ExecutionFailException("Incorrectly classified AlwaysOne as balanced.");
                    }

#line 74 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    if ((Exercise3__.Apply((numQubits, Exercise1__)) == true))
                    {
#line 75 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        throw new ExecutionFailException("Incorrectly classified Exercise1 as constant.");
                    }

#line 78 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                    if ((Exercise3__.Apply((numQubits, Exercise2__.Partial(new Func<(IQArray<Qubit>,Qubit), (Int64,Int64,IQArray<Qubit>,Qubit)>((__arg1__) => (firstIndex, secondIndex, __arg1__.Item1, __arg1__.Item2))))) == true))
                    {
#line 82 "C:\\Users\\Henry Zou\\OneDrive\\Documents\\TuftsCS\\CS150\\cs150TuftsQuantumSWE\\Lab5\\Lab5Tests.qs"
                        throw new ExecutionFailException("Incorrectly classified Exercise2 as constant.");
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomInt = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Random.DrawRandomInt));
            this.Exercise3__ = this.__Factory__.Get<ICallable<(Int64,ICallable), Boolean>>(typeof(Exercise3));
            this.AlwaysZero__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(AlwaysZero));
            this.AlwaysOne__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(AlwaysOne));
            this.Exercise1__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise1));
            this.Exercise2__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,Qubit), QVoid>>(typeof(Exercise2));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Exercise3Test, QVoid, QVoid>(QVoid.Instance);
        }
    }
}